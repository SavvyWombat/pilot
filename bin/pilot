#!/usr/bin/env bash

# Verify user's operating system is supported
case "$(uname -s)" in
    Linux*)             MACHINE=linux;;
    Darwin*)            MACHINE=mac;;
    *)                  MACHINE="UNKNOWN"
esac

if [ "$MACHINE" == "UNKNOWN" ]; then
    echo "Unsupported operating system [$(uname -s)]. Pilot supports macOS, Linux, and Windows with WSL2." >&2

    exit 1
fi

function display_help {
    echo "Pilot by Savvy Wombat"
    echo
    echo "A wrapper for docker-compose to assist PHP development"
    echo
    echo "Commands not listed here are forward to docker-compose"
    echo
    echo "  pilot install             creates a docker-compose.yml file in your project"
    echo "  pilot build-services      alias for docker-composer build"
    echo
    echo "  pilot up                  runs the services"
    echo "  pilot up -d               runs the services in the background"
    echo "  pilot down                stops the services"
    echo "  pilot down -v             stops the services and removes associated volumes"
    echo
    echo "  pilot composer ...        run composer commands in the site container"
    echo "  pilot php ...             run php scripts in the site container"
    echo
    echo "  pilot npm ...             run npm commands in the site container"
    echo
    echo "  pilot bash                opens a terminal in the site container"
    echo
    echo "  pilot serve               start a development server"
    echo "  pilot build               build production assets for the site"

    exit 0
}

function services_are_not_running {
    echo "Services are not currently running" >&2
    echo "" >&2
    echo "Use './vendor/bin/pilot up' or './vendor/bin/pilot up -d' to start services" >&2

    exit 1
}

if [ $# -gt 0 ]; then
    if [ "$1" == "help" ] || [ "$1" == "-h" ] || [ "$1" == "-help" ] || [ "$1" == "--help" ]; then
        display_help
    fi
else
    display_help
fi

# Source the ".env" file so environment variables are available
if [ -f ./.env ]; then
  source ./.env;
fi

export MAIN_SERVICE=${MAIN_SERVICE:-"pilot"}
export NODE_SERVICE=${NODE_SERVICE:-"pilot"}
export WWWUSER=${WWWUSER:-$UID}
export WWWGROUP=${WWWGROUP:-$(id -g)}

# Test which Docker Compose command to use on user's system
docker compose &> /dev/null
if [ $? == 0 ]; then
    DOCKER_COMPOSE=(docker compose)
else
    DOCKER_COMPOSE=(docker-compose)
fi



# Copy docker-compose.yml to the project
if [ "$1" == "install" ]; then
    if [ -f ./docker-compose.yml ]; then
        echo "A docker-compose.yml file already exists in your project"

        exit 1;
    fi

    cp ./vendor/savvywombat/pilot/skel/docker-compose.yml ./

    exit 0;
fi

EXEC="yes"

# Ensure that Docker is running
if ! docker info > /dev/null 2>&1; then
    echo "${BOLD}Docker is not running.${NC}" >&2

    exit 1
fi

# Determine if any services are currently up
if "${DOCKER_COMPOSE[@]}" ps "$MAIN_SERVICE" 2>&1 | grep 'Exit\|exited'; then
    echo "${BOLD}Shutting down old service process...${NC}" >&2

    "${DOCKER_COMPOSE[@]}" down > /dev/null 2>&1

    EXEC="no"
elif [ -z "$("${DOCKER_COMPOSE[@]}" ps -q)" ]; then
    EXEC="no"
fi

ARGS=()

# Proxy various commands through to docker-compose

# Run bash on the main container
if [ "$1" == "bash" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u pilot)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=($MAIN_SERVICE "bash" "$@")
    else
        services_are_not_running
    fi
# Proxy PHP commands to the "php" binary on the main container...
elif [ "$1" == "php" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u pilot)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=($MAIN_SERVICE "php" "$@")
    else
        services_are_not_running
    fi
# Proxy NPM commands to the "npm" binary on the main container...
elif [ "$1" == "npm" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u pilot)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=(NODE_SERVICE "npm" "$@")
    else
        services_are_not_running
    fi
# Proxy Composer commands to the "composer" binary on the main container...
elif [ "$1" == "composer" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u pilot)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=($MAIN_SERVICE "composer" "$@")
    else
        services_are_not_running
    fi
# Run the local dev server
elif [ "$1" == "serve" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u pilot)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=($MAIN_SERVICE "php" "-S" "0.0.0.0:80" "$@")
    else
        services_are_not_running
    fi
# Build the static files for distribution
elif [ "$1" == "build" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u pilot)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=($NODE_SERVICE "npm" "run" "build")
    else
        services_are_not_running
    fi
# Alias the original `docker-compose build` command
elif [ "$1" == "build-services" ]; then
    shift 1

    ARGS+=("build" "$@")
else
# Pass any other commands to Docker Compose
    ARGS+=("$@")
fi

# Run Docker Compose with the defined arguments...
"${DOCKER_COMPOSE[@]}" "${ARGS[@]}"